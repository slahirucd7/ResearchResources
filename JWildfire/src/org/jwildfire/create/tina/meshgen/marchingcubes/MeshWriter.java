/*
  JWildfire - an image and animation processor written in Java 
  Copyright (C) 1995-2013 Andreas Maschke

  This is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser 
  General Public License as published by the Free Software Foundation; either version 2.1 of the 
  License, or (at your option) any later version.
 
  This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without 
  even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License along with this software; 
  if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
*/
package org.jwildfire.create.tina.meshgen.marchingcubes;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.PrintStream;

import org.jwildfire.base.Tools;

public class MeshWriter {
  public static void saveMesh(Mesh pMesh, String pOutFilename) {
    try {
      PrintStream ps = new PrintStream(pOutFilename);
      try {
        BufferedOutputStream buffOut = new BufferedOutputStream(ps, 32000);
        try {
          ps.println("# " + new File(pOutFilename).getName() + ", generated by " + Tools.APP_TITLE + " " + Tools.APP_VERSION);
          for (Point3f point : pMesh.getVertices()) {
            ps.println("v " + point.x + " " + point.y + " " + point.z);
          }
          if (pMesh.getVertexNormals() != null) {
            for (Point3f point : pMesh.getVertexNormals()) {
              ps.println("vn " + point.x + " " + point.y + " " + point.z);
            }
          }

          ps.println("s 1");

          for (Face face : pMesh.getFaces()) {
            ps.println("f " + (face.a + 1) + " " + (face.b + 1) + " " + (face.c + 1));
          }

        }
        finally {
          buffOut.flush();
          buffOut.close();
        }
      }
      finally {
        ps.close();
      }
    }
    catch (Exception ex) {
      throw new RuntimeException(ex);
    }
  }
}
